C51 COMPILER V9.60.7.0   I2C                                                               06/08/2025 18:05:06 PAGE 1   


C51 COMPILER V9.60.7.0, COMPILATION OF MODULE I2C
OBJECT MODULE PLACED IN .\Objects\i2c.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE i2c.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\Listings\i2c.l
                    -st) TABS(2) OBJECT(.\Objects\i2c.obj)

line level    source

   1          #include "i2c.h"
   2          
   3          void i2c_delay(unsigned int i)
   4          {
   5   1        unsigned int j;
   6   1        for(j=0;j<i;j++);
   7   1      }
   8          
   9          void i2c_start()
  10          {
  11   1        SCL=1;
  12   1        SDA=1;
  13   1        i2c_delay(5);
  14   1        SDA=0;
  15   1        i2c_delay(5);
  16   1        SCL=0;
  17   1      }
  18          void i2c_stop()
  19          {
  20   1        SCL=0;
  21   1        SDA=0;
  22   1        i2c_delay(5);
  23   1        SCL=1;
  24   1        i2c_delay(5);
  25   1        SDA=1;
  26   1      }
  27          
  28          
  29          // write bite of data master to slave 
  30          
  31          unsigned char i2c_write(unsigned char Idata)
  32          {
  33   1        unsigned char i, ack;
  34   1        for(i=0;i<8;i++)
  35   1        {
  36   2          SDA= (Idata & 0x80)?1:0;
  37   2          i2c_delay(5);
  38   2          SCL=1;
  39   2          i2c_delay(5);
  40   2          SCL=0;
  41   2          Idata= Idata<<1;   // shift to next bit
  42   2        }
  43   1        // release SDA for ACK
  44   1        SDA=1;
  45   1        SCL=1;
  46   1        i2c_delay(5);
  47   1        ack=SDA;    // read ACK
  48   1        SCL=0;
  49   1        return !ack;
  50   1      }
  51          
  52          unsigned char i2c_read(bit ack)
  53          {
  54   1        unsigned char i, dat=0;
C51 COMPILER V9.60.7.0   I2C                                                               06/08/2025 18:05:06 PAGE 2   

  55   1        
  56   1        SDA=1;           // relese SDA for input
  57   1        
  58   1        for(i=0;i<8;i++)
  59   1        {
  60   2          SCL=1;
  61   2          i2c_delay(5);
  62   2          dat<<=1;
  63   2          
  64   2          if(SDA)
  65   2          {
  66   3            dat|=1;  // read bit from SDA
  67   3          }
  68   2          SCL=0;
  69   2          i2c_delay(5);
  70   2        }
  71   1        
  72   1        // Send ACK/NACK to slave
  73   1        
  74   1        SDA=(ack==1)? 0:1;
  75   1        i2c_delay(5);
  76   1        SCL=1;
  77   1        i2c_delay(5);
  78   1        SCL=0;
  79   1        SDA=1;        // relese SDA again
  80   1        i2c_delay(5);
  81   1        return dat;
  82   1      }
  83          
  84          
  85          void eeprom_write_multiple(unsigned char start_add, unsigned char *dat, unsigned char length)
  86          {
  87   1        unsigned char i;
  88   1        i2c_start();
  89   1        i2c_write(0xA0);
  90   1        
  91   1        i2c_write(start_add);
  92   1        
  93   1        for(i=0;i<length;i++)
  94   1        {
  95   2          i2c_write(dat[i]);
  96   2        }
  97   1        i2c_stop();
  98   1        
  99   1        i2c_delay(500);
 100   1      }
 101          
 102          void eeprom_read_multiple(unsigned char start_add, unsigned char *buffer, unsigned char length)
 103          {
 104   1        unsigned char i;
 105   1        i2c_start();
 106   1        i2c_write(0xA0);
 107   1        i2c_write(start_add);
 108   1        i2c_start();
 109   1        i2c_write(0xA1);
 110   1        for(i=0;i<length;i++)
 111   1        {
 112   2          buffer[i]= i2c_read(i<(length-1)?1:0);
 113   2        }
 114   1        
 115   1        i2c_stop();
 116   1        
C51 COMPILER V9.60.7.0   I2C                                                               06/08/2025 18:05:06 PAGE 3   

 117   1      }
 118          
 119          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    303    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----      12
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----       1
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
